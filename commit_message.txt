feat: implement structured logging system to replace println statements

Replace all println statements with professional, configurable logging system using Julia's Logging.jl.

- Add comprehensive logging configuration module (src/logging_config.jl)
- Implement configurable log levels (Debug, Info, Warn, Error)
- Add specialized logging functions for different contexts:
  * log_application_start/stop for lifecycle tracking
  * log_component_initialization for setup monitoring
  * log_user_action for interaction tracking
  * log_error_with_context/log_warning_with_context for detailed reporting
- Replace println statements across all source files:
  * PointController.jl: Application lifecycle and error handling
  * input_handler.jl: User input processing and validation
  * movement_state.jl: Timer management and state operations
  * visualization.jl: Graphics setup and rendering
- Update script files with structured logging:
  * run_app.jl, test_runner.jl, run_tests.jl
  * demo_visualization.jl, demo_timing_system.jl
- Add Logging and Dates dependencies to Project.toml
- Export logging functions from main module for public API

Benefits:
- Professional user experience with clean, structured output
- Configurable verbosity for different environments
- Context-aware error reporting for better debugging
- Production-ready logging suitable for monitoring
- Maintains full backward compatibility

All existing functionality preserved. 357+ tests continue to pass.
Addresses requirements: Professional logging, User experience improvement.