name: CI
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'  # LTS
          - '1.11'  # Latest stable
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
        arch:
          - x64
        exclude:
          - os: macOS-latest
            arch: x86
    steps:
      - uses: actions/checkout@v4
      
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
          
      - uses: julia-actions/cache@v1
      
      - name: Install dependencies
        shell: bash
        run: |
          julia --project=. -e "
            using Pkg
            Pkg.instantiate()
            Pkg.precompile()
          "
          
      - name: Clean previous coverage files
        run: |
          find . -name "*.cov" -delete
          
      - name: Run tests with CairoMakie
        env:
          JULIA_NUM_THREADS: 2
        shell: bash
        run: |
          julia --project=. --code-coverage=user -e "
            using Pkg
            # Use CairoMakie for CI (no display required)
            Pkg.add(\"CairoMakie\")
            using CairoMakie
            CairoMakie.activate!()
            # Run tests manually to avoid GLMakie precompilation
            include(\"test/runtests.jl\")
          "
          
      - name: Process coverage
        if: matrix.version == '1.10' && matrix.os == 'ubuntu-latest'
        run: |
          julia --project=. -e "
            using CoverageTools
            coverage = process_folder()
            LCOV.writefile(\"lcov.info\", coverage)
            println(\"Coverage summary:\")
            for fc in coverage
              covered = sum([x !== nothing && x > 0 ? 1 : 0 for x in fc.coverage])
              total = length(fc.coverage)
              percentage = round(covered/total*100, digits=2)
              println(\"  \$(fc.filename): \$(covered)/\$(total) (\$(percentage)%)\")
            end
          "
        
      - uses: julia-actions/julia-processcoverage@v1
        if: matrix.version == '1.10' && matrix.os == 'ubuntu-latest'
        
      - uses: codecov/codecov-action@v3
        if: matrix.version == '1.10' && matrix.os == 'ubuntu-latest'
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          
      - name: Check coverage threshold
        if: matrix.version == '1.10' && matrix.os == 'ubuntu-latest'
        run: |
          julia --project=. -e "
            using CoverageTools
            coverage = process_folder()
            total_lines = sum([length(fc.coverage) for fc in coverage])
            covered_lines = sum([sum([x !== nothing && x > 0 ? 1 : 0 for x in fc.coverage]) for fc in coverage])
            coverage_percentage = round(covered_lines/total_lines*100, digits=2)
            println(\"Overall coverage: \$(coverage_percentage)%\")
            if coverage_percentage < 13.0
              @error \"Coverage below threshold of 13%. Current coverage: \$(coverage_percentage)%\"
              exit(1)
            else
              println(\"âœ“ Coverage above threshold of 13%\")
            end
          "
          
  # Optional GLMakie smoke test (only for interactive features)
  smoke-glmakie:
    name: GLMakie Smoke Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1.10'
          
      - uses: julia-actions/cache@v1
      
      - name: Install X11/Mesa & xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y xorg-dev mesa-utils xvfb libgl1 freeglut3-dev \
            libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev
          
      - name: Install dependencies
        run: |
          julia --project=. -e "
            using Pkg
            Pkg.instantiate()
            Pkg.add(\"GLMakie\")
          "
          
      - name: Run GL smoke test under xvfb
        run: |
          DISPLAY=:0 xvfb-run -s '-screen 0 1024x768x24' \
            julia --project=. -e "
              using GLMakie
              GLMakie.activate!()
              using Pkg
              # Only run the GLMakie smoke test, not all tests
              include(\"test/test_glmakie_smoke.jl\")
            "
          
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: julia-actions/setup-julia@v1
        with:
          version: '1.10'
          
      - name: Install quality tools
        run: |
          julia -e 'using Pkg; Pkg.add(["JuliaFormatter", "Aqua"])'
          
      - name: Check formatting
        run: |
          julia -e '
            using JuliaFormatter
            if !format(".", verbose=true, overwrite=false)
              @error "Code is not formatted correctly"
              exit(1)
            end
          '
          
      - name: Run Aqua.jl quality checks with CairoMakie
        shell: bash
        run: |
          julia --project=test -e '
            using Pkg
            Pkg.develop(PackageSpec(path="."))
            Pkg.instantiate()
            # Use CairoMakie for CI (no display required)
            Pkg.add("CairoMakie")
            using CairoMakie
            CairoMakie.activate!()
            using Aqua, PointController
            Aqua.test_all(PointController, ambiguities=false, stale_deps=false)
          '