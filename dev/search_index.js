var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Main-Functions","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/#PointController.run_point_controller","page":"API Reference","title":"PointController.run_point_controller","text":"run_point_controller()\n\nMain entry point for the Point Controller application. Creates an interactive window with a controllable point using WASD keys.\n\nPrerequisites\n\nGLMakie backend must be activated before calling this function:\n\nusing GLMakie\nGLMakie.activate!()\nusing PointController\nrun_point_controller()\n\nFeatures\n\nInteractive point control with WASD keys\nReal-time coordinate display\nComprehensive error handling and robustness\nModern GLMakie integration following best practices\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.PointController","page":"API Reference","title":"PointController.PointController","text":"PointController.jl\n\nAn interactive Julia application for controlling a point using WASD keyboard inputs with real-time GLMakie visualization. This module provides a complete implementation of an event-driven point controller with smooth movement, error handling, and performance optimizations.\n\nMain Components\n\nMovement State Management: Tracks key presses and point position\nInput Handling: Processes keyboard events with validation\nVisualization: GLMakie-based rendering with real-time updates\nError Handling: Comprehensive error recovery and user feedback\n\nUsage\n\n# First, activate the GLMakie backend\nusing GLMakie\nGLMakie.activate!()\n\n# Then use PointController\nusing PointController\nrun_point_controller()  # Start the interactive application\n\nBackend Activation\n\nPointController requires GLMakie to be activated before use. This follows modern Makie.jl  patterns where users control backend activation:\n\nusing GLMakie\nGLMakie.activate!()  # Must be called before using PointController functions\n\nYou can also customize the GLMakie backend with options:\n\nGLMakie.activate!(\n    title = \"My Point Controller\",\n    vsync = true,\n    framerate = 60.0\n)\n\nArchitecture\n\nThe application follows a modular, event-driven architecture:\n\nGLMakie provides the windowing and rendering system\nObservable patterns handle real-time coordinate updates\nTimer-based movement ensures smooth animation\nComprehensive error handling provides robustness\n\nAuthor: Point Controller Development Team\n\nVersion: 0.1.0\n\nLicense: MIT\n\n\n\n\n\n","category":"module"},{"location":"api/#Core-Functions","page":"API Reference","title":"Core Functions","text":"","category":"section"},{"location":"api/#PointController.setup_visualization_window","page":"API Reference","title":"PointController.setup_visualization_window","text":"setup_visualization_window(fig::Figure)\n\nSet up and display the GLMakie window with proper configuration and performance optimizations.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.setup_keyboard_events!","page":"API Reference","title":"PointController.setup_keyboard_events!","text":"setup_keyboard_events!(fig::Figure, state::MovementState, position::Observable{Point2f}, time_obs::Union{Observable{String}, Nothing} = nothing)\n\nSet up GLMakie keyboard event listeners for the given figure with timing integration and error handling. Connects key press and release events to the movement state handlers and manages the movement timer. Includes robust error handling for keyboard event processing. If time_obs is provided, the timer will also update the time display.\n\n\n\n\n\nsetup_keyboard_events!(fig::Figure, state::MovementState)\n\nLegacy version for backward compatibility - delegates to the new version. Note: This version won't have continuous movement without position parameter.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.setup_logging","page":"API Reference","title":"PointController.setup_logging","text":"setup_logging(level::LogLevel = Logging.Info; show_timestamp::Bool = true)\n\nConfigure the global logger for PointController with the specified log level.\n\nArguments\n\nlevel::LogLevel: Minimum log level to display (default: Info)\nshow_timestamp::Bool: Whether to include timestamps in log messages (default: true)\n\nExamples\n\n# Set up info-level logging (default)\nsetup_logging()\n\n# Set up debug-level logging for development\nsetup_logging(Logging.Debug)\n\n# Set up warning-level logging for production\nsetup_logging(Logging.Warn, show_timestamp=false)\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.log_application_start","page":"API Reference","title":"PointController.log_application_start","text":"log_application_start()\n\nLog application startup information.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.log_application_stop","page":"API Reference","title":"PointController.log_application_stop","text":"log_application_stop()\n\nLog application shutdown information.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.log_glmakie_activation","page":"API Reference","title":"PointController.log_glmakie_activation","text":"log_glmakie_activation()\n\nLog GLMakie backend activation status.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.log_component_initialization","page":"API Reference","title":"PointController.log_component_initialization","text":"log_component_initialization(component::String)\n\nLog component initialization.\n\nArguments\n\ncomponent::String: Name of the component being initialized\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.log_user_action","page":"API Reference","title":"PointController.log_user_action","text":"log_user_action(action::String, details::String = \"\")\n\nLog user actions like key presses.\n\nArguments\n\naction::String: Description of the user action\ndetails::String: Additional details about the action (optional)\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.log_error_with_context","page":"API Reference","title":"PointController.log_error_with_context","text":"log_error_with_context(error_msg::String, context::String = \"\", exception = nothing)\n\nLog errors with context information.\n\nArguments\n\nerror_msg::String: Main error message\ncontext::String: Context where the error occurred (optional)\nexception: Exception object for additional details (optional)\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.log_warning_with_context","page":"API Reference","title":"PointController.log_warning_with_context","text":"log_warning_with_context(warning_msg::String, context::String = \"\")\n\nLog warnings with context information.\n\nArguments\n\nwarning_msg::String: Main warning message\ncontext::String: Context where the warning occurred (optional)\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.get_current_log_level","page":"API Reference","title":"PointController.get_current_log_level","text":"get_current_log_level()\n\nGet the current global log level.\n\nReturns\n\nLogLevel: Current minimum log level being displayed\n\n\n\n\n\n","category":"function"},{"location":"api/#Movement-State","page":"API Reference","title":"Movement State","text":"","category":"section"},{"location":"api/#PointController.MovementState","page":"API Reference","title":"PointController.MovementState","text":"MovementState\n\nMutable struct to track the current movement state of the point. Includes key press tracking, movement speed, timing information, and quit flag.\n\nFields\n\nkeys_pressed::Set{String}: Set of currently pressed keys\nmovement_speed::Float64: Movement speed in units per frame (default: 1.0)\nlast_update_time::Float64: Timestamp of last position update\nis_moving::Bool: Whether the point is currently moving\nupdate_timer::Union{Timer, Nothing}: Timer for continuous movement updates\nshould_quit::Bool: Flag to request application exit\n\nConstructor\n\nMovementState(; movement_speed = 1.0)\n\n\n\n\n\n","category":"type"},{"location":"api/#PointController.add_key!","page":"API Reference","title":"PointController.add_key!","text":"add_key!(state::MovementState, key::String)\n\nAdd a key to the currently pressed keys set.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.remove_key!","page":"API Reference","title":"PointController.remove_key!","text":"remove_key!(state::MovementState, key::String)\n\nRemove a key from the currently pressed keys set.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.calculate_movement_vector","page":"API Reference","title":"PointController.calculate_movement_vector","text":"calculate_movement_vector(state::MovementState)\n\nCalculate the movement vector based on currently pressed keys. Returns a tuple (dx, dy) representing the movement direction. Handles diagonal movement when multiple keys are pressed simultaneously.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.reset_movement_state!","page":"API Reference","title":"PointController.reset_movement_state!","text":"reset_movement_state!(state::MovementState)\n\nReset the movement state to initial conditions.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.request_quit!","page":"API Reference","title":"PointController.request_quit!","text":"request_quit!(state::MovementState)\n\nSet the quit flag to request application exit.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.get_pressed_keys","page":"API Reference","title":"PointController.get_pressed_keys","text":"get_pressed_keys(state::MovementState)\n\nGet a copy of the currently pressed keys set. Returns a Set{String} containing the currently pressed keys.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.start_movement_timer!","page":"API Reference","title":"PointController.start_movement_timer!","text":"start_movement_timer!(state::MovementState, position::Observable{Point2f}, time_obs::Union{Observable{String}, Nothing} = nothing, update_interval::Float64 = 1/60)\n\nStart a timer-based update loop for smooth continuous movement with error handling. Creates a timer that updates the point position at regular intervals while keys are pressed. Also updates the time display if time_obs is provided. Includes performance optimizations and robust error handling.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.stop_movement_timer!","page":"API Reference","title":"PointController.stop_movement_timer!","text":"stop_movement_timer!(state::MovementState)\n\nStop the movement timer and clean up resources with error handling.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.update_movement_timing!","page":"API Reference","title":"PointController.update_movement_timing!","text":"update_movement_timing!(state::MovementState)\n\nUpdate timing information when movement state changes. Should be called when keys are pressed or released.\n\n\n\n\n\n","category":"function"},{"location":"api/#Input-Handling","page":"API Reference","title":"Input Handling","text":"","category":"section"},{"location":"api/#PointController.handle_key_press","page":"API Reference","title":"PointController.handle_key_press","text":"handle_key_press(key::String, state::MovementState)\n\nProcess a key press event and update the movement state with error handling. Adds the key to the pressed keys set if it's a valid WASD key. Handles quit request if 'q' key is pressed. Gracefully handles invalid key inputs.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.handle_key_release","page":"API Reference","title":"PointController.handle_key_release","text":"handle_key_release(key::String, state::MovementState)\n\nProcess a key release event and update the movement state with error handling. Removes the key from the pressed keys set if it's a valid WASD key. Gracefully handles invalid key inputs.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.is_movement_key","page":"API Reference","title":"PointController.is_movement_key","text":"is_movement_key(key::String)\n\nCheck if the given key is a valid movement key (WASD). Returns true if the key is one of the movement keys, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.clear_all_keys_safely!","page":"API Reference","title":"PointController.clear_all_keys_safely!","text":"clear_all_keys_safely!(state::MovementState)\n\nSafely clear all pressed keys and stop movement. Used for robustness when window loses focus or on errors.\n\n\n\n\n\n","category":"function"},{"location":"api/#Visualization","page":"API Reference","title":"Visualization","text":"","category":"section"},{"location":"api/#PointController.create_visualization","page":"API Reference","title":"PointController.create_visualization","text":"create_visualization()\n\nCreate and configure the GLMakie visualization window with point and coordinate display. Includes performance optimizations and error handling. Returns the figure, axis, point observable, coordinate text observable, and time observable.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.update_point_position!","page":"API Reference","title":"PointController.update_point_position!","text":"update_point_position!(position::Observable{Point2f}, x::Float64, y::Float64)\n\nUpdate the observable point position with new coordinates.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.create_point_position","page":"API Reference","title":"PointController.create_point_position","text":"create_point_position()\n\nCreate an observable point position using GLMakie's Observable type. Returns an Observable containing a Point2f initialized at origin (0, 0).\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.get_current_position","page":"API Reference","title":"PointController.get_current_position","text":"get_current_position(position::Observable{Point2f})\n\nGet the current position as a tuple (x, y).\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.update_position_from_state!","page":"API Reference","title":"PointController.update_position_from_state!","text":"update_position_from_state!(position::Observable{Point2f}, state::MovementState)\n\nUpdate the point position based on the current movement state. Calculates movement vector from pressed keys and applies it to the position.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.apply_movement_to_position!","page":"API Reference","title":"PointController.apply_movement_to_position!","text":"apply_movement_to_position!(position::Observable{Point2f}, movement_vector::Tuple{Float64, Float64})\n\nApply a movement vector to the current position and update the observable. Takes the current position and adds the movement vector components.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.update_coordinate_display!","page":"API Reference","title":"PointController.update_coordinate_display!","text":"update_coordinate_display!(position::Observable{Point2f})\n\nForce update of coordinate display (useful for manual refresh).\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.update_time_display!","page":"API Reference","title":"PointController.update_time_display!","text":"update_time_display!(time_obs::Observable{String})\n\nUpdate the time observable with the current time. This function is called by the movement timer system.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.create_time_observable","page":"API Reference","title":"PointController.create_time_observable","text":"create_time_observable()\n\nCreate an observable that displays the current time. Returns an Observable containing a formatted time string. Note: Time updates are handled by the movement timer system.\n\n\n\n\n\n","category":"function"},{"location":"api/#PointController.format_current_time","page":"API Reference","title":"PointController.format_current_time","text":"format_current_time()\n\nFormat the current time as a readable string. Returns a string in HH:MM:SS format.\n\n\n\n\n\n","category":"function"},{"location":"api/#Constants","page":"API Reference","title":"Constants","text":"","category":"section"},{"location":"api/#PointController.KEY_MAPPINGS","page":"API Reference","title":"PointController.KEY_MAPPINGS","text":"KEY_MAPPINGS\n\nConstant dictionary mapping WASD keys to their corresponding movement vectors. Each vector represents the direction of movement as (x, y) coordinates.\n\nMappings\n\n\"w\": Up movement (0.0, 1.0)\n\"s\": Down movement (0.0, -1.0)  \n\"a\": Left movement (-1.0, 0.0)\n\"d\": Right movement (1.0, 0.0)\n\n\n\n\n\n","category":"constant"},{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting-started/#Prerequisites","page":"Getting Started","title":"Prerequisites","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Julia 1.10 or higher\nOpenGL 3.3+ compatible graphics card and drivers\nWorking display system (X11, Wayland, or native windowing)","category":"page"},{"location":"getting-started/#Setup-Instructions","page":"Getting Started","title":"Setup Instructions","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Install Julia: Download from julialang.org\nClone the repository:\ngit clone https://github.com/bakulev/JuliaTestRocket.git\ncd JuliaTestRocket\nActivate the project environment:\nusing Pkg\nPkg.activate(\".\")\nPkg.instantiate()\nVerify installation:\njulia --project=. verify_installation.jl","category":"page"},{"location":"getting-started/#Backend-Activation","page":"Getting Started","title":"Backend Activation","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"PointController follows modern Makie.jl patterns where users control backend activation.  You must activate GLMakie before using PointController functions:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"using GLMakie\nGLMakie.activate!()  # Required before using PointController","category":"page"},{"location":"getting-started/#Configuration-Options","page":"Getting Started","title":"Configuration Options","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# Basic activation\nGLMakie.activate!()\n\n# With custom window settings\nGLMakie.activate!(\n    title = \"My Point Controller\",\n    vsync = true,\n    framerate = 60.0,\n    fxaa = true\n)\n\n# For HiDPI displays\nGLMakie.activate!(scalefactor = 2.0)","category":"page"},{"location":"getting-started/#First-Run","page":"Getting Started","title":"First Run","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"# First, activate the GLMakie backend\nusing GLMakie\nGLMakie.activate!()\n\n# Then use PointController\nusing PointController\nrun_point_controller()","category":"page"},{"location":"getting-started/#Controls","page":"Getting Started","title":"Controls","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Key Action\nW Move point up (positive Y direction)\nS Move point down (negative Y direction)\nA Move point left (negative X direction)\nD Move point right (positive X direction)\nQ Quit application","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Advanced Controls:","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Multiple keys: Press multiple WASD keys simultaneously for diagonal movement\nWindow close: Close the window to exit the application\nFocus handling: Application safely handles window focus changes","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Basic-Usage","page":"Examples","title":"Basic Usage","text":"","category":"section"},{"location":"examples/#Simple-Point-Control","page":"Examples","title":"Simple Point Control","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GLMakie\nGLMakie.activate!()\nusing PointController\n\n# Start the application\nrun_point_controller()","category":"page"},{"location":"examples/#Custom-Movement-Speed","page":"Examples","title":"Custom Movement Speed","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GLMakie\nGLMakie.activate!()\nusing PointController\n\n# Create a movement state with custom speed\nstate = MovementState(movement_speed = 0.05)  # Slower movement\n\n# You can also create faster movement\nfast_state = MovementState(movement_speed = 0.2)  # Faster movement","category":"page"},{"location":"examples/#Programmatic-Key-Handling","page":"Examples","title":"Programmatic Key Handling","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using PointController\n\n# Create a movement state\nstate = MovementState()\n\n# Add keys programmatically\nadd_key!(state, 'w')\nadd_key!(state, 'd')\n\n# Calculate movement vector\nmovement = calculate_movement_vector(state)\nprintln(\"Movement vector: $movement\")\n\n# Remove keys\nremove_key!(state, 'w')\nremove_key!(state, 'd')","category":"page"},{"location":"examples/#Advanced-Usage","page":"Examples","title":"Advanced Usage","text":"","category":"section"},{"location":"examples/#Custom-Backend-Configuration","page":"Examples","title":"Custom Backend Configuration","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GLMakie\n\n# Configure GLMakie for high-performance rendering\nGLMakie.activate!(\n    title = \"High Performance Point Controller\",\n    vsync = false,           # Disable vsync for maximum FPS\n    framerate = 120.0,       # Target 120 FPS\n    fxaa = true,            # Enable anti-aliasing\n    ssao = false,           # Disable ambient occlusion for performance\n    render_on_demand = false # Continuous rendering\n)\n\nusing PointController\nrun_point_controller()","category":"page"},{"location":"examples/#Development-and-Testing","page":"Examples","title":"Development and Testing","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GLMakie\nGLMakie.activate!(\n    debugging = true,        # Enable debugging\n    visible = true,         # Ensure window is visible\n    vsync = false          # Disable for faster testing\n)\n\nusing PointController\n\n# Test individual components\nstate = MovementState(movement_speed = 1.0)\n@assert is_movement_key('w') == true\n@assert is_movement_key('x') == false\n\n# Test movement calculations\nadd_key!(state, 'w')\nadd_key!(state, 'd')\nmovement = calculate_movement_vector(state)\n@assert movement ≈ [0.7071, 0.7071] atol=0.001  # Normalized diagonal","category":"page"},{"location":"examples/#Integration-Examples","page":"Examples","title":"Integration Examples","text":"","category":"section"},{"location":"examples/#Using-with-Other-Packages","page":"Examples","title":"Using with Other Packages","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GLMakie\nGLMakie.activate!()\nusing PointController\nusing Plots  # For additional plotting\n\n# You can use PointController alongside other visualization packages\n# Just make sure GLMakie is activated first\n\n# Run the point controller\nrun_point_controller()\n\n# After closing, you can use other plotting packages\n# (Note: You may need to switch backends for other packages)","category":"page"},{"location":"examples/#Batch-Processing","page":"Examples","title":"Batch Processing","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using GLMakie\nGLMakie.activate!()\nusing PointController\n\n# Function to run multiple sessions\nfunction run_multiple_sessions(n_sessions::Int)\n    for i in 1:n_sessions\n        println(\"Starting session $i of $n_sessions\")\n        run_point_controller()\n        println(\"Session $i completed\")\n    end\nend\n\n# Run 3 sessions\nrun_multiple_sessions(3)","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/#Common-Issues","page":"Troubleshooting","title":"Common Issues","text":"","category":"section"},{"location":"troubleshooting/#GLMakie-Backend-Issues","page":"Troubleshooting","title":"GLMakie Backend Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"\"GLMakie backend not activated\"","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Solution: Activate GLMakie before using PointController\nusing GLMakie\nGLMakie.activate!()\nusing PointController\nrun_point_controller()","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"\"OpenGL initialization failed\"","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Update graphics drivers to latest version\nVerify OpenGL 3.3+ support: glxinfo | grep \"OpenGL version\" (Linux)\nTry software rendering if hardware acceleration unavailable","category":"page"},{"location":"troubleshooting/#Display-Issues","page":"Troubleshooting","title":"Display Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Window doesn't appear","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check display system configuration (DISPLAY variable on Linux)\nVerify X11 forwarding if using SSH: ssh -X username@hostname\nEnsure window manager is running","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Black or corrupted window","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Update graphics drivers\nTry different GLMakie backend settings:\nGLMakie.activate!(debugging = true)","category":"page"},{"location":"troubleshooting/#Input-Issues","page":"Troubleshooting","title":"Input Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Keyboard input not working","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Click on the window to ensure it has focus\nCheck for conflicting key bindings in window manager\nVerify keyboard layout is standard QWERTY","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Keys get \"stuck\"","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"This is handled automatically when window loses focus\nIf it persists, close and restart the application","category":"page"},{"location":"troubleshooting/#Performance-Issues","page":"Troubleshooting","title":"Performance Issues","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Slow or laggy movement","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Close other graphics-intensive applications\nReduce window size if experiencing lag\nCheck system resource usage (CPU, memory, GPU)\nTry disabling vsync:\nGLMakie.activate!(vsync = false)","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"High CPU usage","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Enable render-on-demand mode:\nGLMakie.activate!(render_on_demand = true)","category":"page"},{"location":"troubleshooting/#Error-Messages","page":"Troubleshooting","title":"Error Messages","text":"","category":"section"},{"location":"troubleshooting/#Graphics-Errors","page":"Troubleshooting","title":"Graphics Errors","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"\"Display system not available\"","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: Ensure X11/Wayland is running or enable X11 forwarding for SSH","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"\"Out of memory error\"","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: Close other applications and restart Julia session","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"\"OpenGL context creation failed\"","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Solution: \n1. Update graphics drivers\n2. Check OpenGL support: glxinfo | grep \"OpenGL\"\n3. Try software rendering: export LIBGL_ALWAYS_SOFTWARE=1","category":"page"},{"location":"troubleshooting/#Julia-Package-Errors","page":"Troubleshooting","title":"Julia Package Errors","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"\"Package not found\"","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Solution: Ensure you're in the correct project environment\nusing Pkg\nPkg.activate(\".\")\nPkg.instantiate()","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"\"Method not found\"","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Solution: Restart Julia session and reload packages\n# Exit Julia and restart, then:\nusing GLMakie\nGLMakie.activate!()\nusing PointController","category":"page"},{"location":"troubleshooting/#Platform-Specific-Issues","page":"Troubleshooting","title":"Platform-Specific Issues","text":"","category":"section"},{"location":"troubleshooting/#Linux","page":"Troubleshooting","title":"Linux","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"X11 Issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Check if X11 is running\necho $DISPLAY\n\n# Start X11 if needed\nstartx\n\n# For SSH, enable X11 forwarding\nssh -X username@hostname","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Wayland Compatibility","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Force X11 backend if Wayland causes issues\nexport GDK_BACKEND=x11\nexport QT_QPA_PLATFORM=xcb","category":"page"},{"location":"troubleshooting/#macOS","page":"Troubleshooting","title":"macOS","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Permission Issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Grant terminal/Julia permission to control computer in System Preferences\nEnsure accessibility permissions are enabled","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Retina Display Issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"# Use appropriate scaling\nGLMakie.activate!(scalefactor = 2.0)","category":"page"},{"location":"troubleshooting/#Windows","page":"Troubleshooting","title":"Windows","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"DirectX Issues","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Update DirectX runtime\nUpdate graphics drivers\nTry OpenGL mode if DirectX fails","category":"page"},{"location":"troubleshooting/#Debug-Mode","page":"Troubleshooting","title":"Debug Mode","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Enable debugging for more detailed error information:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"using GLMakie\nGLMakie.activate!(debugging = true)\nusing PointController\n\n# This will provide more verbose error messages\nrun_point_controller()","category":"page"},{"location":"troubleshooting/#Getting-Help","page":"Troubleshooting","title":"Getting Help","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you encounter issues not covered here:","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check existing issues: GitHub Issues\nCreate a new issue with:\nJulia version (versioninfo())\nOperating system\nGraphics card/driver information\nComplete error message\nSteps to reproduce\nInclude system information:\n# Run this and include output in your issue\nusing InteractiveUtils\nversioninfo()\n\n# For graphics information (Linux)\nrun(`glxinfo | grep \"OpenGL\"`)","category":"page"},{"location":"#JuliaTestRocket","page":"Home","title":"JuliaTestRocket","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An interactive Julia application that displays a controllable point using GLMakie visualization. Control the point's movement using WASD keys with real-time coordinate updates and smooth continuous movement.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: PointController Application)","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Interactive Point Visualization: Real-time point rendering using GLMakie\nWASD Keyboard Controls: Intuitive movement controls with immediate response\nReal-time Coordinate Display: Live coordinate updates as the point moves\nSmooth Continuous Movement: Fluid movement while keys are held down\nDiagonal Movement Support: Natural diagonal movement when multiple keys are pressed\nRobust Error Handling: Comprehensive error handling for graphics and input issues\nPerformance Optimized: Efficient rendering and input processing","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# First, activate the GLMakie backend\nusing GLMakie\nGLMakie.activate!()\n\n# Then use PointController\nusing PointController\nrun_point_controller()","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(url=\"https://github.com/bakulev/JuliaTestRocket\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or clone the repository:","category":"page"},{"location":"","page":"Home","title":"Home","text":"git clone https://github.com/bakulev/JuliaTestRocket.git\ncd JuliaTestRocket\njulia --project=. -e \"using Pkg; Pkg.instantiate()\"","category":"page"},{"location":"#System-Requirements","page":"Home","title":"System Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia 1.10 or higher\nOpenGL 3.3+ compatible graphics card and drivers\nWorking display system (X11, Wayland, or native windowing)","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"getting-started.md\", \"api.md\", \"examples.md\", \"troubleshooting.md\"]","category":"page"}]
}
